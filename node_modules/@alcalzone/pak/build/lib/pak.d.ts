import { Npm } from "./package-managers/npm";
import type { PackageManager } from "./package-managers/package-manager";
import { YarnBerry } from "./package-managers/yarn-berry";
import { YarnClassic } from "./package-managers/yarn-classic";
export declare const packageManagers: Readonly<{
    yarn: typeof YarnBerry;
    yarnClassic: typeof YarnClassic;
    npm: typeof Npm;
}>;
export interface DetectPackageManagerOptions {
    /** The working directory for the package manager. Detection will start from here upwards. */
    cwd?: string;
    /** Whether to change the `cwd` to operate in the package directory instead of the current package. */
    setCwdToPackageRoot?: boolean;
    /** If this is `false` and no package manager with a matching lockfile was found, another pass is done without requiring one */
    requireLockfile?: boolean;
}
export declare function detectPackageManager({ cwd, setCwdToPackageRoot, requireLockfile, }?: DetectPackageManagerOptions): Promise<PackageManager>;
