"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YarnBerry = void 0;
const execa_1 = __importDefault(require("execa"));
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const package_manager_1 = require("../package-manager");
function setLoglevel(_args, _loglevel) {
    // yarn berry doesn't allow setting the log level
}
class YarnBerry extends package_manager_1.PackageManager {
    /** Executes a "raw" yarn command */
    async command(args, options = {}) {
        var _a, _b, _c, _d, _e, _f;
        const promise = (0, execa_1.default)("yarn", args, Object.assign(Object.assign({}, options), { cwd: this.cwd, reject: false, all: true }));
        // Pipe command outputs if desired
        if (this.stdout)
            (_a = promise.stdout) === null || _a === void 0 ? void 0 : _a.pipe(this.stdout, { end: false });
        if (this.stderr)
            (_b = promise.stderr) === null || _b === void 0 ? void 0 : _b.pipe(this.stderr, { end: false });
        if (this.stdall)
            (_c = promise.all) === null || _c === void 0 ? void 0 : _c.pipe(this.stdall, { end: false });
        // Execute the command
        const result = await promise;
        // Unpipe the command outputs again, so the process can end
        (_d = promise.stdout) === null || _d === void 0 ? void 0 : _d.unpipe();
        (_e = promise.stderr) === null || _e === void 0 ? void 0 : _e.unpipe();
        (_f = promise.all) === null || _f === void 0 ? void 0 : _f.unpipe();
        // Translate the returned result
        return (0, package_manager_1.execaReturnValueToCommandResult)(result);
    }
    fail(message) {
        const stderr = message;
        return Promise.resolve({
            success: false,
            exitCode: 1,
            stdout: "",
            stderr,
            stdall: stderr,
        });
    }
    /**
     * Installs the given packages using `yarn add`. If no packages are given, `yarn install` is executed in the cwd.
     */
    install(packages = [], options = {}) {
        const args = [];
        if (options.global) {
            return this.fail(`yarn berry does not support global installs!`);
        }
        if (packages.length > 0) {
            args.push("add");
            args.push(...packages);
            if (options.dependencyType === "dev") {
                args.push("--dev");
            }
            if (options.exact) {
                args.push("--exact");
            }
        }
        else {
            args.push("install");
            // if (this.environment === "production") {
            // 	args.push("--production");
            // }
        }
        setLoglevel(args, this.loglevel);
        if (options.additionalArgs) {
            args.push(...options.additionalArgs);
        }
        return this.command(args);
    }
    uninstall(packages, options = {}) {
        const args = [];
        if (options.global) {
            return this.fail(`yarn berry does not support global uninstalls!`);
        }
        args.push("remove");
        args.push(...packages);
        setLoglevel(args, this.loglevel);
        if (options.additionalArgs) {
            args.push(...options.additionalArgs);
        }
        return this.command(args);
    }
    update(packages = [], options = {}) {
        // We want to update the package.json entries and yarn only does that
        // when using the `add` command
        return this.install(packages, options);
    }
    rebuild(packages = []) {
        const args = ["rebuild"];
        args.push(...packages);
        setLoglevel(args, this.loglevel);
        return this.command(args);
    }
    async detect(requireLockfile = true, setCwdToPackageRoot = false) {
        try {
            const root = await this.findRoot(requireLockfile ? "yarn.lock" : undefined);
            // Check if yarn is version 1
            const version = await this.version();
            if (!version.startsWith("2.") && !version.startsWith("3.")) {
                return false;
            }
            if (setCwdToPackageRoot)
                this.cwd = root;
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    async version() {
        const result = await this.command(["-v"]);
        if (!result.success) {
            throw new Error(`Could not detect yarn version: ${result.stderr}! Exit code: ${result.exitCode}.`);
        }
        return result.stdout;
    }
    async overrideDependencies(dependencies) {
        var _a;
        let root;
        try {
            root = await this.findRoot("yarn.lock");
            const packageJsonPath = path.join(root, "package.json");
            const packageJson = await fs.readJson(packageJsonPath, {
                encoding: "utf8",
            });
            // Add the dependencies to "resolutions" and let yarn figure it out
            let resolutions = (_a = packageJson.resolutions) !== null && _a !== void 0 ? _a : {};
            resolutions = Object.assign(Object.assign({}, resolutions), dependencies);
            packageJson.resolutions = resolutions;
            await fs.writeJson(packageJsonPath, packageJson, {
                spaces: 2,
                encoding: "utf8",
            });
        }
        catch (e) {
            const stderr = "Error updating root package.json: " + e.message;
            return {
                success: false,
                exitCode: 1,
                stdout: "",
                stderr,
                stdall: stderr,
            };
        }
        // Running "yarn install" in the root dir will install the correct dependencies
        const prevCwd = this.cwd;
        this.cwd = root;
        try {
            return await this.install();
        }
        finally {
            this.cwd = prevCwd;
        }
    }
}
exports.YarnBerry = YarnBerry;
//# sourceMappingURL=index.js.map