"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execaReturnValueToCommandResult = exports.PackageManager = void 0;
const fs_extra_1 = require("fs-extra");
const path_1 = __importDefault(require("path"));
class PackageManager {
    constructor() {
        /** The directory to run the package manager commands in */
        this.cwd = process.cwd();
        /**
         * The environment the package manager is executed in (default: "production").
         * In an production environment, `pak` avoids accidentally pulling in `devDependencies`.
         */
        this.environment = "production";
    }
    /** Finds the closest parent directory that contains a package.json and the corresponding lockfile (if one was specified) */
    async findRoot(lockfile) {
        let curDir = this.cwd;
        let parentDir;
        while (true) {
            const packageJsonPath = path_1.default.join(curDir, "package.json");
            if (await (0, fs_extra_1.pathExists)(packageJsonPath)) {
                if (!lockfile)
                    return curDir;
                const lockfilePath = path_1.default.join(curDir, lockfile);
                if (await (0, fs_extra_1.pathExists)(lockfilePath))
                    return curDir;
            }
            parentDir = path_1.default.dirname(curDir);
            if (parentDir === curDir) {
                // we've reached the root without finiding a package.json
                throw new Error(`This directory tree does not contain a directory with package.json${lockfile ? " and a lockfile" : ""}!`);
            }
            curDir = parentDir;
        }
    }
}
exports.PackageManager = PackageManager;
function execaReturnValueToCommandResult(result) {
    return {
        success: !result.failed &&
            !result.isCanceled &&
            !result.killed &&
            !result.timedOut,
        exitCode: result.exitCode,
        stdout: result.stdout,
        stderr: result.stderr,
        stdall: result.all,
    };
}
exports.execaReturnValueToCommandResult = execaReturnValueToCommandResult;
//# sourceMappingURL=package-manager.js.map